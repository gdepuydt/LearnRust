# Understanding Ownership

Ownersgip rules:

- Each value in Rust has a variable that’s called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

Under the hood, when a variable goes out of scope Rust automatically calls the `drop` function to return (*ie.* free) the memory.
This is *Resource Acquisition Is Initialization (RAII).

## Owner movement

```rust
let s1 = String::from("hello");
let s2 = s1;

println!("{}, world!", s1);
```

This will crash. Ownership has moved from s1 to s2. s1 has been dropped (out of scope). This prevents double free errors from happening.

<img src="/images/s1s2.svg" height = 400, width = 300/>

## Deep copy with Clone function

```rust
let s1 = String::from("hello");
let s2 = s1.clone();

println!("s1 = {}, s2 = {}", s1, s2);
```
warning: deep copy of heap data can be expensive operation

## Ownership and functions

```rust
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it’s okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
```

Scope and function return values:

```rust
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
  // moved, so nothing happens. s1 goes out of scope and is dropped.

fn gives_ownership() -> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("hello"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// takes_and_gives_back will take a String and return one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}
```

> Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It’s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.

Instead of using Tuple return types, Rust has a feature, called references to deal with this issue.

## References and Borrowing

Instead of taking ownership of a value, a function can take a reference to an object as a parameter.

```rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

<img src="/images/reference.svg" height = 400, width = 600/>

We call having references as function parameters *borrowing*.

Both the variable *and* the reference must be marked *mutable*.

```rust
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}
```

> But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope.

In addition, there can be no mix of mutable and immutable references.

This is to prevent data race conditions.

## Slice types

### String slices

```rust
let s = String::from("hello world");
let len = s.len();

let hello = &s[0..5]; //not including 5
let slice = &s[..5];  //same as above
let slice = &s[3..];  //to end of string
let world = &s[6..=10]; //including 10
let slice = &s[0..len]; //entire string
let slice = &s[..]; //same as above

```




